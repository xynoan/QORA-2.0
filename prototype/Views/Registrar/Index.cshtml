@{
    ViewBag.Title = "- Registrar";
    Layout = "~/Views/Shared/_AccountLayout.cshtml";
    var currentTime = DateTime.Now.ToString("h:mm tt"); // "h:mm tt" will give you "9:30 AM"
    var amPm = DateTime.Now.ToString("tt");
    var currentDateTime = DateTime.Now.ToString("dddd, MMMM dd, yyyy (tt)");
}
@model List<prototype.Models.Registrar.StudentProfileViewModel>

<!-- Include Font Awesome CDN (in case it's not already included in your layout) -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
<div class="container" id="main-container">
    <div class="d-flex gap-5">
        <div class="input-group border border-black p-3 rounded-4">
            <i class="fa-solid fa-magnifying-glass mt-3 ms-3 me-3" style="font-size: 25px; color: grey;"></i>
            <input type="search" name="search" placeholder="Search by Reference ID or Student Number" class="form-control">
            <button id="submit" type="submit" style="background-color: var(--main-color);" class="text-white rounded-end-4 p-3">Search</button>
        </div>  
        <div class="d-flex text-white rounded-4 p-3 align-items-center" style="width: 500px;  background-color: var(--main-color);">
            <p class="fw-bold fs-3 m-0" id="liveTime">
                @Html.Raw(currentTime)
                <span id="am_pm" class="fw-normal" style="vertical-align: super; font-size: 13px;">@Html.Raw(amPm)</span>
            </p>
            <span id="seconds" style="margin-right: 50px;" class="fw-bold fs-3 m-0"></span>

            <div style="margin-left: 30px;">
                <p class="m-0 ms-3">Work Time</p>
                <p style="font-size: 10px;" class="m-0 ms-3">
                    @Html.Raw(currentDateTime) <br> Time in Manila, Metro Manila
                </p>
            </div>
        </div>
    </div>

    <div id="content-form" class="p-md-5 p-3 mt-3">
        @await Html.PartialAsync("_LogoutModal")
        <div class="d-flex flex-column flex-lg-row gap-5">
            <div class="first-half" style="width: 100%">
                <!-- Students Section Header -->
                <div class="d-flex flex-wrap align-items-center gap-2 mb-3">
                    <h1 class="fs-2">Students</h1>
                    <button class="filter btn btn-outline-dark">All</button>
                    <button class="filter btn btn-outline-dark">Active</button>
                    <select class="form-select w-auto">
                        <option selected>Archive</option>
                        <option value="1">One</option>
                        <option value="2">Two</option>
                        <option value="3">Three</option>
                    </select>
                    <a id="filter-anchor" href="#" onclick="toggleFilter()" class="black-on-hover text-decoration-none text-white p-2 ms-2" style="background-color: var(--main-color);"><i class="fa-solid fa-filter text-white me-2"></i>Filters</a>
                 <!-- filter codes --->


                    <table class="table">
                        <thead>
                            <tr>
                                <th>Photo</th>
                                <th>Student ID</th>
                                <th>Full Name</th>
                                <th>Email</th>
                                <th><center>Actions</center></th> <!-- Add Actions Column -->

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var student in Model)
                            {
                                <tr class="student-row"
                                    data-student-id="@student.StudentId"
                                    data-full-name="@student.FullName"
                                    data-photo-url="@student.PhotoUrl"
                                    data-year-level="@student.YearLevelTerm"
                                    data-gwa="@student.Gwa"
                                    data-status="@student.Status"
                                    data-reference-number="@student.ReferenceNumber"
                                    onclick="handleRowClick('@student.StudentId', '@student.FullName', '@student.PhotoUrl', '@student.YearLevelTerm', '@student.Gwa', '@student.ReferenceNumber', '@student.Status')"
                                    style="cursor: pointer;">
                                    <td>
                                        <img src="@(!string.IsNullOrEmpty(student.PhotoUrl)
                                ? $"data:image/jpeg;base64,{student.PhotoUrl}"
                                : "default-profile.jpg")"
                                             alt="Student Photo"
                                                 style="width: 40px; height: 40px; border-radius: 50%;">
                                    </td>
                                    <td>@student.StudentId</td>
                                    <td>@student.FullName</td>
                                    <td>@student.Email</td>
                                    <td><center>
                                        <!-- Font Awesome Delete Button -->
                                        <i class="fas fa-trash-alt text-danger" style="cursor: pointer;"
                                               onclick="deleteReference('@student.StudentId')"></i>
                                        </center>
                                    </td>
                                </tr>
                                <!-- No results message (hidden by default) -->
                                <tr id="noResultsRow" style="display: none;">
                                    <td colspan="5" class="text-center text-danger">No results found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>


                </div>
            </div>
        <div class="second-half" style="width: 35%;">
                <input type="text" name="referenceId" id="referenceId" placeholder="Reference ID" class="form-control mb-3" style="width: 70%;" readonly>
                <div class="border border-black rounded-3 p-5">
        <div class="mb-4 d-flex flex-column justify-content-center align-items-center text-center">
            <span class="studentnum fw-bold fs-5 mb-2" id="studentId">STUDENT ID</span>
            <img id="studentPhoto" class="border border-black border-2" height="150px" src="../../images/default-profile.png" alt="Student Photo">
            <span class="name fw-bold fs-5 mb-2" id="studentName">Student Name</span>
            <span class="year sub-span rounded-2 mb-2" id="studentYear">Year Level</span>
            <span class="status text-success sub-span rounded-2 mb-2" id="studentStatus">Status</span>
            <span class="gwa sub-span rounded-2" id="studentGwa">GWA: </span>
        </div>
        <div class="d-flex justify-content-between">
        <a href="@Url.Action("ViewProfiles", "Registrar")" id="viewProfile" class="underline-on-hover text-decoration-none text-black border border-grey border-2 p-1 rounded-2">View Profile</a>
                        <a href="#" id="enlistStudent" class="underline-on-hover text-decoration-none text-black border border-grey border-2 p-1 rounded-2">Enlist Student</a>
                    </div>
    </div>
</div>

        </div>
    </div>
    <div class="d-flex justify-content-center align-items-center mt-3 gap-2">
        <div style="width: 40px; height: 40px; border-radius: 50%; background-color: #102c39;">
        </div>
        <div style="width: 30px; height: 30px; border-radius: 50%; background-color: #1c465c;">
        </div>
        <a href="@Url.Action("DataAnalytics")">
            <img src="~/images/Right-Chevron-Outline-Icon-Graphics-29549986-1.jpg" height="50" />
        </a>
    </div>
</div>

<script>
    function updateTime() {
        var now = new Date();
        var hours = now.getHours();
        var minutes = now.getMinutes();
        var seconds = now.getSeconds();
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // Handle midnight (0 hours)
        minutes = minutes < 10 ? '0' + minutes : minutes;
        seconds = seconds < 10 ? '0' + seconds : seconds; // Format seconds

        var timeString = hours + ':' + minutes + '<span class="am-pm">' + ampm + '</span>';
        document.getElementById('liveTime').innerHTML = timeString + '<span class="fw-normal" style="vertical-align: super; font-size: 13px; position:absolute;">' + seconds + '</span>';
    }

    // Update the time every second
    setInterval(updateTime, 1000);

</script>
<script>
    async function updateSecondHalf(studentId, fullName, photoUrl, yearLevelTerm, gwa, referenceNumber, status) {
        // Update the panel with the student's details
        document.getElementById("studentId").textContent = studentId || "STUDENT ID";
        document.getElementById("studentName").textContent = fullName || "Student Name";
        document.getElementById("studentPhoto").src = photoUrl
            ? `data:image/jpeg;base64,${photoUrl}`
            : "../../images/default-profile.png";
        document.getElementById("studentYear").textContent = yearLevelTerm || "Year Level - Term";
        document.getElementById("studentStatus").textContent = status || "Status";
        document.getElementById("studentGwa").textContent = `GWA: ${gwa || "N/A"}`;
        document.getElementById("referenceId").value = referenceNumber || "Reference ID";

        // Update the "View Profile" button link
        const viewProfileLink = document.getElementById("viewProfile");
        viewProfileLink.href = `/Registrar/ViewProfiles?studentId=${studentId}`;

        // Update the "Enlist Student" button link
        const enlistStudentLink = document.getElementById("enlistStudent");
        enlistStudentLink.href = `/Registrar/Enlist?studentId=${studentId}`;
    }

    document.addEventListener("DOMContentLoaded", function () {
        const rows = document.querySelectorAll(".student-row");

        rows.forEach(row => {
            row.addEventListener("click", function () {
                const studentId = this.getAttribute("data-student-id");
                const fullName = this.getAttribute("data-full-name");
                const photoUrl = this.getAttribute("data-photo-url");
                const yearLevelTerm = this.getAttribute("data-year-level");
                const gwa = this.getAttribute("data-gwa");
                const referenceNumber = this.getAttribute("data-reference-number");
                const status = this.getAttribute("data-status");

                updateSecondHalf(studentId, fullName, photoUrl, yearLevelTerm, gwa, referenceNumber, status);
            });
        });
    });

</script>


<script>
    async function deleteReference(studentId) {
        if (confirm(`Are you sure you want to delete the reference for Student ID: ${studentId}?`)) {
            try {
                const response = await fetch(`/Registrar/DeleteReferenceByStudentId?studentId=${studentId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });

                if (response.ok) {
                    const row = document.querySelector(`[data-student-id="${studentId}"]`);
                    if (row) row.remove();
                    alert("Reference deleted successfully.");
                } else {
                    const errorMessage = await response.text();
                    alert(`Error: ${errorMessage}`);
                }
            } catch (error) {
                console.error("Error deleting reference:", error);
                alert("An unexpected error occurred.");
            }
        }
    }
</script>

<script>
    // This function will handle the search functionality
    function searchStudents() {
        const searchTerm = document.querySelector('input[type="search"]').value.toLowerCase(); // Get the search input and convert it to lowercase
        const rows = document.querySelectorAll('.student-row'); // Get all rows in the student table
        let resultsFound = false; // Track if any result is found

        rows.forEach(row => {
            const studentId = row.getAttribute('data-student-id').toLowerCase(); // Get the student ID from the row's data attribute
            const referenceNumber = row.getAttribute('data-reference-number').toLowerCase(); // Get the reference number from the row's data attribute

            // Check if the search term matches either the student ID or the reference number
            if (studentId.includes(searchTerm) || referenceNumber.includes(searchTerm)) {
                row.style.display = ''; // Show the row if it matches the search term
                resultsFound = true; // Mark that a result has been found
            } else {
                row.style.display = 'none'; // Hide the row if it doesn't match the search term
            }
        });

        // Show or hide the "No results found" message based on search results
        const noResultsRow = document.getElementById('noResultsRow');
        if (resultsFound) {
            noResultsRow.style.display = 'none'; // Hide the "No results found" message if there are results
        } else {
            noResultsRow.style.display = ''; // Show the "No results found" message if no results are found
        }
    }

    // Add event listener to the search button
    document.getElementById('submit').addEventListener('click', function (e) {
        e.preventDefault(); // Prevent the default form submission
        searchStudents(); // Trigger the search function when the button is clicked
    });

    // Optional: You can also trigger the search function on input change if you'd like to search as you type
    document.querySelector('input[type="search"]').addEventListener('input', searchStudents);
</script>

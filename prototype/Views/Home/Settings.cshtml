@{
    ViewBag.Title = "- Settings";
    Layout = "~/Views/Shared/_AccountLayout.cshtml";
}

<form method="post" enctype="multipart/form-data" action="@Url.Action("Settings", "Home")">
    <div class="container" id="main-container">
        <div id="content-form" class="p-4 mt-3">
            @await Html.PartialAsync("_LogoutModal")
            <h1 class="mt-3 fs-3">PROFILE</h1>
            <p>Update your photo and password here.</p>
            <hr class="divider">
            <!-- Profile Image Section -->
            <div class="d-flex gap-4">
                <img id="profileImage" src="@ViewBag.ProfileImage" alt="Profile Picture" height="100px" width="100px" class="rounded-4" style="border: 2px solid var(--main-color);">
                <div>
                    <p class="fw-bold fs-5">Profile Picture</p>
                    <button type="button" id="uploadButton" class="text-decoration-none text-white p-2 rounded-3" style="background: var(--main-color);">
                        <i class="fa-solid fa-upload"></i> Upload Image
                    </button>
                    <input type="file" id="fileInput" name="SEF_ID_PICTURE" class="d-none" accept="image/*">
                    <button type="button" id="removeButton" class="text-decoration-none text-black border border-black p-2 rounded-3" style="display: none;">
                        <i class="fa-solid fa-trash-can"></i> Remove
                    </button>
                    <p class="mt-2">We support PNGs, JPEGs, and GIFs under 100MB</p>
                </div>
            </div>

            <!-- User details and password change form -->
            <div class="d-flex gap-4 mb-3" style="width: 65%;">
                <div class="input-group d-flex flex-column">
                    <p class="fw-bold m-0">Full Name:</p>
                    <input type="text" value="@ViewBag.FullName" class="form-control" style="width: 100%;" disabled>
                </div>
                <div class="input-group d-flex flex-column">
                    <p class="fw-bold m-0">Email:</p>
                    <input type="text" value="@ViewBag.Email" class="form-control" style="width: 100%;" disabled>
                </div>
            </div>

            <!-- Password Fields -->
            <h4 class="fw-bold mt-4">Change Password</h4>
            <div class="d-flex gap-4 mt-3">
                <div style="width: 50%;">
                    <div class="input-group d-flex align-items-center">
                        <p class="fw-bold m-2" style="width:156px;">Old Password:</p>
                        <input type="password" id="oldPassword" name="oldPassword" class="form-control" style="width: 50%; height:25px;">
                    </div>
                    <div class="input-group d-flex align-items-center">
                        <p class="fw-bold m-2" style="width:156px;">New Password:</p>
                        <input type="password" id="newPassword" name="newPassword" class="form-control" style="width: 50%; height:25px;">
                    </div>
                    <div class="input-group d-flex align-items-center">
                        <p class="fw-bold m-2">Confirm Password:</p>
                        <input type="password" id="confirmNewPassword" name="confirmNewPassword" class="form-control" style="width: 50%; height:25px;">
                    </div>
                </div>
                <a href="@Url.Action("Forgot", "Login")" class="text-black forgotPassword">Forgot Password</a>
            </div>

            <!-- Password Mismatch Message -->
            <div style="margin-left:170px; color: red; display: none;" id="passwordMismatch">
                <p>Passwords do not match. Please try again.</p>
            </div>

            <!-- Password Requirements -->
            <div style="margin-left:170px;" id="password-requirements">
                <p class="password-indicator" id="charLength" style="display: block;"><i id="charLengthIcon" class="fa-regular fa-circle-xmark"></i> At least 8-25 characters</p>
                <p class="password-indicator" id="lowercase" style="display: none;"><i id="lowercaseIcon" class="fa-regular fa-circle-xmark"></i> At least 1 lowercase letter</p>
                <p class="password-indicator" id="uppercase" style="display: none;"><i id="uppercaseIcon" class="fa-regular fa-circle-xmark"></i> At least 1 uppercase letter</p>
                <p class="password-indicator" id="number" style="display: none;"><i id="numberIcon" class="fa-regular fa-circle-xmark"></i> At least 1 number</p>
                <p class="password-indicator" id="special" style="display: none;"><i id="specialIcon" class="fa-regular fa-circle-xmark"></i> At least 1 special character (&#35; &#64; &#36; &#37; ^ &amp; *)</p>
            </div>

            <!-- Save and Cancel Buttons -->
            <div class="mt-4 d-flex gap-3 justify-content-end">
                <button type="submit" class="text-decoration-none text-white p-3 rounded-4" style="background-color: var(--main-color);" id="save">Save Changes</button>
                <a href="@Url.Action("Settings", "Home")" class="cancel text-decoration-none border border-black p-3 rounded-4 text-black">Cancel</a>
            </div>
    </div>

</div>
</form>


        <script>
            document.addEventListener("DOMContentLoaded", function () {
                  const passwordField = document.getElementById("newPassword");
                const confirmPasswordField = document.getElementById("confirmNewPassword");
                const passwordMismatchMessage = document.getElementById("passwordMismatch");

                const criteria = [
                    { id: "charLength", check: (pwd) => pwd.length >= 8 && pwd.length <= 25 },
                    { id: "lowercase", check: (pwd) => /[a-z]/.test(pwd) },
                    { id: "uppercase", check: (pwd) => /[A-Z]/.test(pwd) },
                    { id: "number", check: (pwd) => /\d/.test(pwd) },
                    { id: "special", check: (pwd) => @Html.Raw(@"/[!@#$%^&*]/.test(pwd)") },
                ];

                passwordField.addEventListener("input", validatePassword);
                confirmPasswordField.addEventListener("input", validatePasswordMatch);


                function validatePassword() {
                    const password = passwordField.value;

                    for (let i = 0; i < criteria.length; i++) {
                        const criterion = criteria[i];
                        const iconElement = document.getElementById(criterion.id + "Icon");
                        const textElement = document.getElementById(criterion.id);

                        if (criterion.check(password)) {
                            iconElement.classList.remove("fa-circle-xmark");
                            iconElement.classList.add("fa-circle-check");
                            iconElement.style.color = "green";
                            textElement.style.color = "green";
                            textElement.style.display = "none"; // Hide this criterion if valid
                        } else {
                            iconElement.classList.remove("fa-circle-check");
                            iconElement.classList.add("fa-circle-xmark");
                            iconElement.style.color = "red";
                            textElement.style.color = "red";
                            textElement.style.display = "block"; // Show this criterion if invalid
                            hideFollowingCriteria(i); // Hide criteria after the first unmet one
                            break;
                        }
                    }
                                    validatePasswordMatch(); // Check for password match on each password input

                }
                function validatePasswordMatch() {
                    if (passwordField.value && confirmPasswordField.value) {
                        if (passwordField.value === confirmPasswordField.value) {
                            passwordMismatchMessage.style.display = "none";
                        } else {
                            passwordMismatchMessage.style.display = "block";
                        }
                    } else {
                        passwordMismatchMessage.style.display = "none";
                    }
                }

                // Function to hide all criteria after the current one
                function hideFollowingCriteria(startIndex) {
                    for (let i = startIndex + 1; i < criteria.length; i++) {
                        const textElement = document.getElementById(criteria[i].id);
                        textElement.style.display = "none";
                    }
                }
            });

    
        </script>
        <script>
    document.addEventListener("DOMContentLoaded", function () {
        const uploadButton = document.getElementById('uploadButton');
        const fileInput = document.getElementById('fileInput');
        const removeButton = document.getElementById('removeButton');
        const profileImage = document.getElementById('profileImage');
        const form = document.querySelector('form'); // Get the form element
        const saveButton = document.getElementById('save');

        // Show the file input dialog when the "Upload Image" button is clicked
        uploadButton.addEventListener('click', function () {
            fileInput.click(); // Trigger file input click to select an image
        });

        // Handle image file selection
        fileInput.addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    // Set the profile image preview
                    profileImage.src = e.target.result;
                };
                reader.readAsDataURL(file);
                removeButton.style.display = 'inline-block'; // Show the remove button
            }
        });

        // Handle image removal
        removeButton.addEventListener('click', function () {
            profileImage.src = '@ViewBag.ProfileImage'; // Reset to existing image
            fileInput.value = ''; // Reset the file input
            removeButton.style.display = 'none'; // Hide the remove button
        });

        // Submit the form when the user clicks the "Save Changes" button
        saveButton.addEventListener('click', function (event) {
            event.preventDefault(); // Prevent the default form submission

            // Ensure the form includes the file input data before submitting
            if (fileInput.files.length > 0) {
                // If a file is selected, we can add the file to the form submission
                form.submit(); // Programmatically submit the form
            } else {
                // If no file is selected, just submit the form normally
                form.submit();
            }
        });
    });

        </script>
    
